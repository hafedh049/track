// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'operation_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5990814546269587863),
      name: 'OperationModel',
      lastPropertyId: const IdUid(7, 7147926927054317944),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4593677722856306827),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4798152138333845521),
            name: 'operationDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2027551702130543992),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6990140746663517468),
            name: 'amount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8071466964878611596),
            name: 'currency',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7047452941504723917),
            name: 'nature',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7147926927054317944),
            name: 'picture',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 5990814546269587863),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    OperationModel: EntityDefinition<OperationModel>(
        model: _entities[0],
        toOneRelations: (OperationModel object) => [],
        toManyRelations: (OperationModel object) => {},
        getId: (OperationModel object) => object.id,
        setId: (OperationModel object, int id) {
          object.id = id;
        },
        objectToFB: (OperationModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final amountOffset = fbb.writeString(object.amount);
          final currencyOffset = fbb.writeString(object.currency);
          final natureOffset = fbb.writeString(object.nature);
          final pictureOffset = fbb.writeListInt8(object.picture);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.operationDate.millisecondsSinceEpoch);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, amountOffset);
          fbb.addOffset(4, currencyOffset);
          fbb.addOffset(5, natureOffset);
          fbb.addOffset(6, pictureOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final operationDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final amountParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final currencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final natureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final pictureParam = const fb.Uint8ListReader(lazy: false)
              .vTableGet(buffer, rootOffset, 16, Uint8List(0)) as Uint8List;
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = OperationModel(
              operationDate: operationDateParam,
              title: titleParam,
              amount: amountParam,
              currency: currencyParam,
              nature: natureParam,
              picture: pictureParam,
              id: idParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [OperationModel] entity fields to define ObjectBox queries.
class OperationModel_ {
  /// see [OperationModel.id]
  static final id =
      QueryIntegerProperty<OperationModel>(_entities[0].properties[0]);

  /// see [OperationModel.operationDate]
  static final operationDate =
      QueryIntegerProperty<OperationModel>(_entities[0].properties[1]);

  /// see [OperationModel.title]
  static final title =
      QueryStringProperty<OperationModel>(_entities[0].properties[2]);

  /// see [OperationModel.amount]
  static final amount =
      QueryStringProperty<OperationModel>(_entities[0].properties[3]);

  /// see [OperationModel.currency]
  static final currency =
      QueryStringProperty<OperationModel>(_entities[0].properties[4]);

  /// see [OperationModel.nature]
  static final nature =
      QueryStringProperty<OperationModel>(_entities[0].properties[5]);

  /// see [OperationModel.picture]
  static final picture =
      QueryByteVectorProperty<OperationModel>(_entities[0].properties[6]);
}
